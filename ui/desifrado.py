
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage,filedialog,messagebox
import os
import json
from module.encriptar import verificar_hash
global estadoJson,rutaJson
global canvas, imgChek, imgX
global nombreArchivo,fechaHash,rutaArchivoHash
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets/frame2")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def home(win):
    from ui.inicio import inicioUi
    win.destroy()
    inicioUi()
def load_json(ruta):
    if not os.path.exists(ruta):
        return {}  # Devuelve un diccionario vacío si el archivo no existe
    
    with open(ruta, 'r') as f:
        contenido = f.read()  # Lee todo el contenido del archivo como una cadena
        # Reemplaza las comillas simples por comillas dobles
        contenido_corregido={}
        if isinstance(contenido, str):
            contenido_corregido = contenido.replace("'", '"')
            contenido_corregido=contenido_corregido.strip('"')
        else:
            contenido_corregido=contenido
       # print(contenido_corregido)
        # Carga el JSON corregido como un objeto Python
        try:
            objeto_json = json.loads(contenido_corregido)
            return objeto_json
        except json.JSONDecodeError as e:
            print(f"Error al decodificar JSON en el archivo '{ruta}': {e}")
            return {}  # Devuelve un diccionario vacío en caso de error
def save_json(data, path):
    #print(data)
    with open(path, 'w') as f:
        json.dump(data, f, indent=4)
def cambio_texto(canvas,texto,labelId):    
    canvas.itemconfig(labelId, text=texto)
def seleccionarJson():
    global rutaJson,estadoJson
    try:
        rutaJson = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
        #print (rutaJson)
        jsonBase=load_json(rutaJson)
        save_json(jsonBase, "db.json")
        jsonStado(True)
    except Exception as e:
        jsonStado(False)
        print(f"Error al cargar el archivo JSON: {e}")
        return
def seleccionar_archivo():
    #global selected_path_archivo_probar
    selected_path_archivo_probar = filedialog.askopenfilename()
    #print(selected_path_archivo_probar)
    probarArchivo(selected_path_archivo_probar)

def probarArchivo(ruta):
    print("probar")
    resultadoFiltro=[]
    nombreAcortado=ruta.split("/")[len(ruta.split("/"))-1]
    db=load_json("db.json")
    print(db)
    for item in db["hashes"]:
                if item["archivo"] == nombreAcortado:
                    print(item["archivo"] == nombreAcortado)
                    resultadoFiltro.append(item)
    if len(resultadoFiltro)<1:
                print("No se encontró el archivo")
                messagebox.showwarning("Error", "No se encontró el archivo")
                return False
    
    estado=verificar_hash(ruta, resultadoFiltro[0]["hasher"])
    if estado:
        print("archivo integro")
        integridadStado(True)
        cambioNombreArchivo(f"Archivo: {nombreAcortado}")
        cambioFechaArchivo(f"Fecha: {resultadoFiltro[0]['fecha']} \n Hash: {resultadoFiltro[0]['hasher']}")
        cambioRutaArchivo(f"Ruta: {ruta} ")
        messagebox.showinfo("Encontrado", "archivo integro")
    else:
        print("archivo manipulado")
        messagebox.showwarning("Error", "archivo manipulado")
    
def jsonStado(estado):
    global canvas, imgChek, imgX
    print(estado)
    if estado:
        imgChek = PhotoImage(file=relative_to_assets("image_3.png"))
        image_5 = canvas.create_image(220.0, 131.0, image=imgChek)
    else:
        imgX = PhotoImage(file=relative_to_assets("image_5.png"))
        image_6 = canvas.create_image(220.0, 131.0, image=imgX)
def integridadStado(estado):
    global canvas,imgCheckFile,imgXFile
    imgCheckFile = PhotoImage(file=relative_to_assets("image_4.png"))
    image_6 = canvas.create_image(447.0, 209.0, image=imgCheckFile)
def cambioNombreArchivo(nombre):
    global nombreArchivo,canvas
    canvas.itemconfig(nombreArchivo, text=nombre)
def cambioFechaArchivo(fecha):
    global fechaHash,canvas
    canvas.itemconfig(fechaHash, text=fecha)
def cambioRutaArchivo(ruta):
    global rutaArchivoHash,canvas
    canvas.itemconfig(rutaArchivoHash, text=ruta)
def desifrarUi():
 
    global canvas,nombreArchivo,fechaHash,rutaArchivoHash



    window = Tk()

    window.geometry("585x386")
    window.configure(bg = "#4E93FC")


    canvas = Canvas(
        window,
        bg = "#4E93FC",
        height = 386,
        width = 585,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        164.0,
        190.0,
        image=image_image_1
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        436.0,
        200.0,
        image=image_image_2
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: seleccionar_archivo(),
        relief="flat"
    )
    button_1.place(
        x=45.0,
        y=210.0,
        width=121.0,
        height=35.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: seleccionarJson(),
        relief="flat"
    )
    button_2.place(
        x=37.0,
        y=116.0,
        width=142.0,
        height=35.0
    )

    canvas.create_text(
        18.0,
        39.0,
        anchor="nw",
        text="DESIFRADO",
        fill="#FFFFFF",
        font=("Inter Bold", 32 * -1)
    )

    canvas.create_text(
        18.0,
        73.0,
        anchor="nw",
        text="Para el desifrado tiene que tener el archivo\nJson donde se encuentra losarchivos",
        fill="#FFFFFF",
        font=("Inter Bold", 13 * -1)
    )
    #image_image_3 = PhotoImage(file=relative_to_assets("image_3.png"))
    #image_5 = canvas.create_image(249.0, 131.0, image=image_image_3)
    #image_image_4 = PhotoImage(file=relative_to_assets("image_4.png"))
    #image_6 = canvas.create_image(457.0, 209.0, image=image_image_4)
    #image_image_3 = PhotoImage(
    #    file=relative_to_assets("image_3.png"))
    #image_3 = canvas.create_image(
    #    249.0,
    #    131.0,
    #    image=image_image_3
    #)
#
    #image_image_4 = PhotoImage(
    #    file=relative_to_assets("image_4.png"))
    #image_4 = canvas.create_image(
    #    457.0,
    #    209.0,
    #    image=image_image_4
    #)

    

   

    canvas.create_text(
        40.0,
        185.0,
        anchor="nw",
        text="SELECCIONA EL ARCHIVO A PROBAR",
        fill="#000000",
        font=("Inter Bold", 12 * -1)
    )

    canvas.create_rectangle(
        25.0,
        166.0,
        304.0,
        173.0,
        fill="#3580F2",
        outline="")

    canvas.create_rectangle(
        317.0,
        147.0,
        555.0,
        154.0,
        fill="#3580F2",
        outline="")

    nombreArchivo=canvas.create_text(
        342.0,
        76.0,
        anchor="nw",
        text="NOMBRE:ARCHIVO.JS",
        fill="#000000",
        font=("Inter Bold", 16 * -1)
    )

    fechaHash=canvas.create_text(
        342.0,
        102.0,
        anchor="nw",
        text="FECHA:10/12/2030,00:00",
        fill="#000000",
        font=("Inter Bold", 16 * -1)
    )

    canvas.create_text(
        332.0,
        170.0,
        anchor="nw",
        text="RUTA:",
        fill="#000000",
        font=("Inter Bold", 16 * -1)
    )

    canvas.create_text(
        343.0,
        200.0,
        anchor="nw",
        text="ESTADO:",
        fill="#000000",
        font=("Inter Bold", 16 * -1)
    )

    rutaArchivoHash=canvas.create_text(
        385.0,
        173.0,
        anchor="nw",
        text="E/ASDASD/AFAS/ARCHIVO.JS",
        fill="#000000",
        font=("Inter Bold", 8 * -1)
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_3 clicked"),
        relief="flat"
    )
    button_3.place(
        x=25.0,
        y=361.0,
        width=56.674713134765625,
        height=23.999988555908203
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: home(window),
        relief="flat"
    )
    button_4.place(
        x=84.0,
        y=361.0,
        width=56.674713134765625,
        height=23.999988555908203
    )
    window.resizable(False, False)
    window.mainloop()
